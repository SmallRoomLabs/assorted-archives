//
//		6502 Generator
//
//		WORD16 		PC,_temp
//		BYTE8 		A,X,Y,SP
//		BYTE8 		nByte,zByte,Carry,Overflow,bdiBits 	(Composite S)
//
//		{M}			textual description of addressing mode e.g. @1,X means zeropage,X
//		{R} 		Read Memory/Acc according to current mode.
//		{W} 		Write Memory/Acc according to current mode.
//
// ********************************************************************************************************
//		Instruction Set (Alphabetical Order)
// ********************************************************************************************************

ADC {M}	: 6D,7D,79,69,65,61,75,72,71
	if (bdiBits & D_FLAG) A = DecimalAdd(A,({R}),Carry) else A = BinaryAdd(A,{R},Carry);
	nByte = zByte = A;

AND {M} : 2D,3D,39,29,25,21,35,32,31
	A = nByte = zByte = A & {R}

ASL {M} : 0E,1E,0A,06,16
	_temp = {R}
	nByte = zByte = (_temp  << 1) & 0xFF
	{W}(nByte)
	Carry = _temp >> 7

BCC @1 : 90
	Branch(Carry = 0)

BCS @1 : B0
	Branch(Carry != 0)

BEQ @1 : F0
	Branch(zByte == 0)

BIT {M} : 2C,3C,89,24,34
	_temp = {M}
	zByte = A & _temp
	nByte = _temp & 0x80;
	Overflow = (_temp & 0x40) ? 1 : 0

BMI @1 : 30
	Branch((nByte & 0x80) != 0)

BNE @1 : D0
	Branch(zByte != 0)

BPL @1 : 10 
	Branch((nByte & 0x80) == 0)

BRA @1 : 80
	Branch(1)

BRK : 00
	// TODO: Break implementation

BVC : 50
	Branch(Overflow == 0)

BVS : 70
	Branch(Overflow != 0)

CLC : 18
	Carry = 0

CLD : D8
	bdiBits &= (D_FLAG ^ 0xFF)

CLI : 58
	bdiBits &= (I_FLAG & 0xFF)

CLV : B8
	Overflow = 0

CMP {M} : CD,DD,D9,C9,C5,C1,D5,D2,D1
	nByte = zByte = BinarySub(A,{R},0);

CPX {M} : EC,E0,E4
	nByte = zByte = BinarySub(X,{R},0);

CPY {M} : CC,C0,C4
	nByte = zByte = BinarySub(Y,{R},0);

DEC {M} : CE,DE,3A,C6,D6
	nByte = zByte = ({R} - 1) & 0xFF;
	{W}(nByte)

DEX : CA
	nByte = zByte = --X;

DEY : 88
	nByte = zByte = --Y;

EOR {M} : 4D,5D,59,49,45,41,55,52,51
	A = nByte = zByte = A ^ {R}

INC {M} : EE,FE,1A,E6,F6
	nByte = zByte = ({R} + 1) & 0xFF;
	{W}(nByte)

INX : E8
	nByte = zByte = --X;

INY : C8
	nByte = zByte = --Y;

JMP @2 : 4C
	// TODO Jump implementation

JSR @2 : 20
	// TODO Jump Subroutine Implementation

LDA {M}: AD,BD,B9,A9,A5,A1,B5,B2,B1
	nByte = zByte = A = {R}

LDX {M}: AE,BE,A2,A6,B6
	nByte = zByte = X = {R}

LDY {M}: AC,BC,A0,A4,B4
	nByte = zByte = Y = {R}

LSR {M}: 4E,5E,4A,46,56
	_temp = {R}
	Carry = _temp & 1
	nByte = zByte = _temp >> 1
	{W}(nByte)

NOP : EA
	{}

OR {M} : 0D,1D,19,09,05,01,15,12,11
	A = nByte = zByte = A | {R}

PHA: 48
	PUSH(A)

PHP: 08
	PUSH(StatusRead())

PLA: 68
	A = PULL()

PLP: 28
	_temp = PULL()
	StatusWrite(_temp)

ROL {M}: 2E,3E,2A,26,36
	_temp = ({R} << 1) | Carry
	Carry = (_temp >> 8)
	nByte = zByte = _temp & 0xFF
	{W}(nByte)

ROR {M}: 6E,7E,6A,66,76
	_temp = (Carry << 8) | {R}
	Carry = _temp & 1
	nByte = zByte = _temp >> 1
	{W}(nByte)

RTI : 40
	// TODO Interrupt Return

RTS : 60
	// TODO Suboutine Return

SBC {M} : ED,FD,F9,E9,E5,E1,F5,F2,F1
	if (bdiBits & D_FLAG) A = DecimalSub(A,({R}),Carry) else A = BinarySub(A,{R},Carry);
	nByte = zByte = A;

SEC : 38
	Carry = 1

SED : F8
	bdiBits |= D_FLAG

SEI : 78
	bdiBits |= I_FLAG

STA {M} : 8D,9D,99,85,81,95,92,91
	{W}(A)

STX {M} : 8E,86,96
	{W}(X)

STY {M} : 8C,84,94
	{W}(Y)

TAX: AA
	X = nByte = zByte = A

TAY: AB
	Y = nByte = zByte = A

TSX: BA
	X = StatusRead()
	nByte = zByte = X

TXA: 8A
	A = nByte = zByte = X

TXS : 9A
	StatusWrite(X)

TYA : 98
	A = nByte = zByte = Y

[Code]

#define C_FLAG (0x01)
#define Z_FLAG (0x02)
#define I_FLAG (0x04)
#define D_FLAG (0x08)
#define B_FLAG (0x10)
#define V_FLAG (0x40)
#define Z_FLAG (0x80)

static BYTE8 BinaryAdd(BYTE8 n1,BYTE8 n2,BYTE8 carry)
{
	_temp = n1 + n2 + carry;
	Overflow = Carry = 0;
	if(~(n1^n2) & (n1^_temp) & 0x80) Overflow = 1
	if(_temp & 0xff00) Carry = 1;
	return _temp;
}

static BYTE8 DecimalAdd(BYTE8 n1,BYTE8 n2,BYTE8 carry)
{
	BYTE8 al = (n1 & 15) + (n2 & 15) + carry;
	if (al > 9) al += 6;
	BYTE8 ah = (n1 >> 4) + (n2 >> 4) + ((al > 15) ? 1 : 0);

	//TODO Check zflag setting on Decimal Addition

	Overflow = Carry = 0;
	if (~(n1^n2) & (n1^(ah << 4)) & 0x80) Overflow = 1
		
	if(ah > 9) ah += 6;
	if(ah > 15) Carry = 1;
	return  (ah << 4) | (al & 15);
}

static BYTE8 BinarySub(BYTE8 n1,BYTE8 n2,BYTE8 carry)
{
	_temp = n1 - n2 - carry;

	Overflow = Carry = 0;
	if((n1^n2) & (n1^_temp) & 0x80) Overflow = 1'
	if(!(_temp & 0xff00)) Carry = 1;

	return _temp;	
}

static BYTE8 DecimalSub(BYTE8 n1,BYTE8 n2,BYTE8 carry)
{
	_temp = n1 - n2 - carry;

	BYTE8 al = (n1 & 15) - (n2 & 15) - carry;
	if(al & 0x80) al -= 6;

	BYTE8 ah = (n1 >> 4) - (n2 >> 4) - ((al & 0x80) ? 1 : 0);

	Overflow = Carry = 0;
	if((n1^n2) & (n1^_temp) & 0x80) Overflow = 1;

	if(!(_temp & 0xff00)) Carry = 1;

	if(ah & 0x80) ah -= 6;
	return (ah << 4) | (al & 15);	
}

static void  Branch(BYTE8 condition) 
static BYTE8 StatusRead()	
static void StatusWrite(s)

#define PUSH(n)	WRITE(0x100+SP,(n));SP--
#define PULL() 	(SP++,READ(0x100+SP))

