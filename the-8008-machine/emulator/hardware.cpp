// *******************************************************************************************************************************
// *******************************************************************************************************************************
//
//		Name:		hardware.c
//		Purpose:	Hardware handling routines (C8008 specific)
//		Created:	21st October 2015
//		Author:		Paul Robson (paul@robsons.org.uk)
//
// *******************************************************************************************************************************
// *******************************************************************************************************************************

#include "sys_processor.h"

static BYTE8 videoMemory[1024];													// 1k Video memory.

// *******************************************************************************************************************************
//													Reset all hardware
// *******************************************************************************************************************************

void HWIReset(void) {
	for (WORD16 w = 0;w < 1024;w++) videoMemory[w] = 0;							// Erase memory
	// ARDUINO only : clear screen.
}

// *******************************************************************************************************************************
//													Handle on end of frame.
// *******************************************************************************************************************************

void HWIEndFrame(void) {
}

// *******************************************************************************************************************************
//											Write to write-only 1k video RAM
// *******************************************************************************************************************************

void HWIWriteVideoMemory(WORD16 address,BYTE8 data) {
	// ARDUINO: Check if data changed, if so flag row dirty.
	videoMemory[address] = data;
}

// *******************************************************************************************************************************
//				Read the joystick [Bits 7-0 : Fire : 0 : 0 : 0 : Right : Left : Down : Up ] active 1
// *******************************************************************************************************************************

BYTE8 HWIReadJoystick(void) {
	return 0;
}

// *******************************************************************************************************************************
//								Read the keyboard (standard ASCII, +ve strobe on bit 7)
// *******************************************************************************************************************************

BYTE8 HWIReadKeyboard(void) {
	return 0;
}

// *******************************************************************************************************************************
//	  Write to sound device. This is a R/2R ladder driving an NE566, so the Frequency is (255-n) / 256 * 1000 Hz
// *******************************************************************************************************************************

void HWIWriteSound(BYTE8 data) {
}

// *******************************************************************************************************************************
//															Access VRAM
// *******************************************************************************************************************************

BYTE8 *HWIGetVideoMemory(void) {
	return videoMemory;
}