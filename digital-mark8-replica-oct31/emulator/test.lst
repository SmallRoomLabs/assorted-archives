 AS V1.42 Beta [Bld 102] - source file test.asm - page 1 - 10/31/2015 3:25:57


       1/       0 :                     	
       2/       0 :                     		cpu		8008new
       3/       0 :                     
       4/       0 : =EH                 TVPort = 0eh
       5/       0 : =8H                 CassetteOutputPort = 08h
       6/       0 : =1H                 CassetteInputPort = 01h
       7/       0 : =0H                 KeyboardPort = 00h
       8/       0 :                     
       9/       0 :                     
      10/       0 :                     		org 	0
      11/       0 :                     
      12/       0 : 36 0F               		mvi 	l,message & 255
      13/       2 : 2E 00               		mvi		h,message / 256
      14/       4 : 46 4F 01            		call 	BIOSPrintString
      15/       7 :                     
      16/       7 : 2E 00               		mvi 	h,buffer / 256
      17/       9 : 36 1F               		mvi 	l,buffer & 255
      18/       B : 46 00 01            		call 	BIOSReadString
      19/       E : 00                  		hlt 	
      20/       F :                     
      21/       F :                     message:
      22/       F : 0C 48 65 6C 6C 6F   		db 		12,"Hello world",13,13,0
                    20 77 6F 72 6C 64 
                    0D 0D 00 
      23/      1E :                     
      24/      1E : FF                  		db 		255
      25/      1F :                     buffer:	ds 		4
      26/      23 : FF                  		db 		255
      27/      24 :                     
      28/      24 :                     		align 	256
      29/     100 :                     
      30/     100 :                     ; ******************************************************************************************************************************
      31/     100 :                     ;
      32/     100 :                     ;	Read string into HL. Handles Backspaces. On entry HL points to the first character of a buffer ; the previous character and
      33/     100 :                     ;	the character at the end of the buffer must both have bit 7 set, this delimits the type-in. 
      34/     100 :                     ;
      35/     100 :                     ;	so db 255,0,0,0,0,255 specifies a three-character buffer (plus space for zero), and HL should point to the first zero. 
      36/     100 :                     ;	The buffer must all be in one page. Only characters 32-127 can be in the buffer. 
      37/     100 :                     ;
      38/     100 :                     ;	BCHL unchanged.
      39/     100 :                     ;
      40/     100 :                     ; ******************************************************************************************************************************
      41/     100 :                     
      42/     100 :                     BIOSReadString:
      43/     100 : 06 1F               		mvi 	a,31	 										; output the cursor (2 wavy lines)
      44/     102 : 46 5D 01            		call 	BIOSCharacterOut 
      45/     105 :                     _BIRSWaitKey:
      46/     105 : 41                  		in 		KeyboardPort 									; wait for keyboard press
      47/     106 : B0                  		ora 	a
      48/     107 : 50 05 01            		jp 		_BIRSWaitKey 
      49/     10A : 24 7F               		ani 	07Fh 											; drop bit 7
      50/     10C : F8                  		mov 	m,a 											; write it out at current character position.
      51/     10D :                     _BIRSWaitRelease:
      52/     10D : 41                  		in 		KeyboardPort 									; wait for it to be released
      53/     10E : B0                  		ora 	a
      54/     10F : 70 0D 01            		jm 		_BIRSWaitRelease
      55/     112 : 06 08               		mvi 	a,8 											; delete the cursor character
      56/     114 : 46 5D 01            		call 	BIOSCharacterOut
      57/     117 :                     
      58/     117 : C7                  		mov 	a,m 											; retrieve typed character.
 AS V1.42 Beta [Bld 102] - source file test.asm - page 2 - 10/31/2015 3:25:57


      59/     118 : 3C 08               		cpi 	8 												; was the character chr(8)
      60/     11A : 68 3A 01            		jz 		_BIRSBackspace 									; if so, backspace.
      61/     11D : 3E 00               		mvi 	m,0 											; replace it with a terminating zero.
      62/     11F : 3C 0D               		cpi 	13 												; was the character chr(13), e.g. a new line
      63/     121 : 68 47 01            		jz 		_BIRSExit										; if so, exit.
      64/     124 : F8                  		mov 	m,a 											; put character back
      65/     125 :                     
      66/     125 : 30                  		inr 	l 												; bump L to next space
      67/     126 : C7                  		mov 	a,m 											; read it
      68/     127 : 31                  		dcr 	l 												; fix L back up
      69/     128 : B0                  		ora 	a 												; if the value is >= 0x7F then we cannot accept it, no room for \0
      70/     129 : 70 00 01            		jm 		BIOSReadString 									; so, try again.
      71/     12C :                     
      72/     12C : C7                  		mov 	a,m 											; read the character typed.
      73/     12D :                     
      74/     12D : 3C 20               		cpi 	32 												; if < 32 then ignore it, go back
      75/     12F : 60 00 01            		jc 		BIOSReadString
      76/     132 :                     
      77/     132 : F8                  		mov 	m,a 											; write the character back.
      78/     133 : 30                  		inr 	l 												; advance to next space
      79/     134 :                     _BIRSPrintAndLoop
      80/     134 : 46 5D 01            		call 	BIOSCharacterOut 								; print it.
      81/     137 : 44 00 01            		jmp		BIOSReadString 									; and get the next character.
      82/     13A :                     
      83/     13A :                     _BIRSBackspace:
      84/     13A : 31                  		dcr 	l 												; go back one.
      85/     13B : C7                  		mov 	a,m 											; read character there
      86/     13C : 30                  		inr 	l 												; fix L back up
      87/     13D : B0                  		ora 	a 												; is that character >= 0x7F e.g. we've reached the beginning
      88/     13E : 70 00 01            		jm 		BIOSReadString 									; if so, we ignore it.
      89/     141 : 31                  		dcr 	l 												; back one character
      90/     142 : 06 08               		mvi 	a,8 											; print chr(8) and loop back
      91/     144 : 44 34 01            		jmp 	_BIRSPrintAndLoop
      92/     147 :                     ;
      93/     147 :                     _BIRSExit: 														; keep working backwards till we find the beginning marker.
      94/     147 : 31                  		dcr 	l
      95/     148 : C7                  		mov 	a,m
      96/     149 : B0                  		ora 	a
      97/     14A : 50 47 01            		jp 		_BIRSExit
      98/     14D : 30                  		inr 	l 												; point to first character
      99/     14E : 07                  		ret
     100/     14F :                     
     101/     14F :                     ; ******************************************************************************************************************************
     102/     14F :                     ;
     103/     14F :                     ;	Print the string at HL. Returns A = 0, HL points to the terminating zero, and preserves BC
     104/     14F :                     ;
     105/     14F :                     ; ******************************************************************************************************************************
     106/     14F :                     
     107/     14F :                     BIOSPrintString:
     108/     14F : C7                  		mov 	a,m
     109/     150 : B0                  		ora 	a
     110/     151 : 2B                  		rz 
     111/     152 : 46 5D 01            		call 	BIOSCharacterOut
     112/     155 : 30                  		inr 	l
     113/     156 : 48 4F 01            		jnz 	BIOSPrintString
     114/     159 : 28                  		inr 	h
     115/     15A : 44 4F 01            		jmp 	BIOSPrintString
     116/     15D :                     
     117/     15D :                     ; ******************************************************************************************************************************
     118/     15D :                     ;
 AS V1.42 Beta [Bld 102] - source file test.asm - page 3 - 10/31/2015 3:25:57


     119/     15D :                     ;	Print any of the 128 characters out, in A, at the current cursor position. A scrolling terminal built out of Dr Sudings
     120/     15D :                     ;	32 x 8 TV Typewriter.
     121/     15D :                     ;
     122/     15D :                     ;								A = 12 		Clear screen
     123/     15D :                     ;								A = 13 		Carriage Return/Line Feed
     124/     15D :                     ; 								A = 8 		Backspace (not if at top left of screen already.)
     125/     15D :                     ;
     126/     15D :                     ; 								To print characters 12,13 and 8 as characters or them with 080h.
     127/     15D :                     ;
     128/     15D :                     ;	Preserves A,B,C,H and L.
     129/     15D :                     ;
     130/     15D :                     ; ******************************************************************************************************************************
     131/     15D :                     
     132/     15D :                     BIOSCharacterOut:
     133/     15D : E6                  		mov 	e,l 											; copy HL to DE
     134/     15E : DD                  		mov 	d,h
     135/     15F : 36 00               		mvi 	l,BICO_SaveALH & 255 							; point HL to save area
     136/     161 : 2E 03               		mvi 	h,BICO_SaveALH / 256 
     137/     163 : F8                  		mov 	m,a 											; save A,L,H there
     138/     164 : 30                  		inr 	l
     139/     165 : FC                  		mov 	m,e 
     140/     166 : 30                  		inr 	l
     141/     167 : FB                  		mov 	m,d
     142/     168 : 36 03               		mvi 	l,BICO_Cursor & 255 							; HL now points to cursor position
     143/     16A :                     
     144/     16A : 3C 08               		cpi 	8 												; is it 8 (backspace) 
     145/     16C : 68 D2 01            		jz 		_BICOBackspace
     146/     16F :                     
     147/     16F : 26 00               		mvi 	e,0 											; E is the position-loopback-mask (see below)
     148/     171 : 3C 0C               		cpi 	12 												; is the character 12 ? (clear screen)
     149/     173 : 48 7E 01            		jnz 	_BICONotClearScreen 
     150/     176 :                     ;
     151/     176 :                     ;		Set up for clear screen. Mask is %11111111, e.g. do till bottom of screen, and we also home the cursor here.
     152/     176 :                     ;
     153/     176 : FC                  		mov 	m,e 											; reset cursor position to $00
     154/     177 : 21                  		dcr 	e 												; E is $FF, e.g. write spaces for the while screen
     155/     178 : C4                  		mov 	a,e 											; output that $FF, which homes the cursor
     156/     179 : 5D                  		out 	TVPort
     157/     17A : A8                  		xra 	a 												; output $00 which is the required transition.										
     158/     17B : 5D                  		out 	TVPort	
     159/     17C : 06 20               		mvi 	a,' '											; print spaces till at 00 again (done by setting E to $FF)
     160/     17E :                     _BICONotClearScreen:
     161/     17E :                     ;
     162/     17E :                     ;		Set up for carriage return. Mask is %00011111 e.g. do till end of line.
     163/     17E :                     ;
     164/     17E : 3C 0D               		cpi 	13 												; is the character 13 ?
     165/     180 : 48 87 01            		jnz 	_BICOLoop
     166/     183 : 06 20               		mvi 	a,' '											; print space rather than code 13.
     167/     185 : 26 1F               		mvi 	e,01Fh 											; and fill till this mask is zero e.g. EOL.
     168/     187 :                     ;
     169/     187 :                     ;	Writes a single character in A out. E contains the 'loop mask' ; if after the character print, the cursor position anded
     170/     187 :                     ;	with this mask is non-zero, print spaces until it is zero - this is used to clear the screen (E = %11111111) and to 
     171/     187 :                     ;	do a carriage return (E = %00011111)
     172/     187 :                     ;
     173/     187 :                     _BICOLoop:
     174/     187 : 36 03               		mvi 	l,BICO_Cursor & 255 							; point HL to the cursor
     175/     189 : 2E 03               		mvi 	h,BICO_Cursor / 256 							
     176/     18B : 34 80               		ori 	080h 											; set bit 7 so it is written.
     177/     18D : D8                  		mov 	d,a 											; save it in D
     178/     18E : 5D                  		out 	TVPort 											; write to TV Display
 AS V1.42 Beta [Bld 102] - source file test.asm - page 4 - 10/31/2015 3:25:57


     179/     18F : A8                  		xra 	a 												; and send the trailing zero.
     180/     190 : 5D                  		out 	TVPort
     181/     191 : C3                  		mov 	a,d 											; restore character written to A.
     182/     192 : DF                  		mov 	d,m 											; read cursor position into D.
     183/     193 : 18                  		inr 	d 												; advance it and write it back.
     184/     194 : FB                  		mov 	m,d
     185/     195 : 19                  		dcr 	d 												; D is now the original position we wrote to.
     186/     196 : F3                  		mov 	l,d 											; L is now the original position
     187/     197 : 2E 02               		mvi 	h,BICO_Mirror/256 								; HL now points to the position in the mirror we should write to.
     188/     199 : F8                  		mov 	m,a 											; save character written in the mirror.
     189/     19A :                     
     190/     19A : 30                  		inr 	l 												; point back to the new cursor position
     191/     19B : C6                  		mov 	a,l
     192/     19C : A4                  		ana 	e 												; do we go round again ?
     193/     19D : 06 20               		mvi 	a,' '											; if so, next time we print a space (doesn't change Z flag)
     194/     19F : 48 87 01            		jnz 	_BICOLoop 		
     195/     1A2 :                     
     196/     1A2 : 20                  		inr 	e 												; if E was $FF then don't scroll when at the bottom (as we've just cleared...)
     197/     1A3 : 68 C7 01            		jz 		_BICOExit
     198/     1A6 : C6                  		mov 	a,l 											; if L, the new cursor position is zero, then scroll up rather than wrap round.
     199/     1A7 : B0                  		ora 	a 												; which is what happens if you just go straight to _BICOExit here - you go to the
     200/     1A8 : 48 C7 01            		jnz 	_BICOExit 										; top line and carry on.
     201/     1AB :                     ;
     202/     1AB :                     ; 		At this point, we scroll the whole screen up. Firstly we scroll the mirror contents page and clear the bottom line.
     203/     1AB :                     ;
     204/     1AB : E0                  		mov 	e,a 											; make E is destination, D source
     205/     1AC : 1E 20               		mvi 	d,32 											; hence E = 0, D = 32
     206/     1AE :                     _BICOCopy:
     207/     1AE : F3                  		mov 	l,d 											; HL points to source
     208/     1AF : C7                  		mov 	a,m 											; read it
     209/     1B0 : F4                  		mov 	l,e 											; HL points to destination
     210/     1B1 : F8                  		mov 	m,a 											; write it back.
     211/     1B2 : C4                  		mov 	a,e 											; look at destination
     212/     1B3 : 3C E0               		cpi 	224 											; if >= 224 e.g. bottom line
     213/     1B5 : 60 BA 01            		jc 		_BICONotClear
     214/     1B8 : 3E A0               		mvi 	m,' '!080h 										; fill it with spaces.
     215/     1BA :                     _BICONotClear:
     216/     1BA : 18                  		inr 	d 												; bump source and destination
     217/     1BB : 20                  		inr 	e 												; until source is back at zero. 												
     218/     1BC : 48 AE 01            		jnz 	_BICOCopy	 									; when source zero, have done the whole copy up.
     219/     1BF :                     ;
     220/     1BF :                     ;		Then we repaint the whole screen from the top. E is already zero, whcih means the whole screen.
     221/     1BF :                     ;
     222/     1BF : 46 E9 01            		call 	_BICORepaintAll 								; after this the whole screen has been repainted, E is zero already.
     223/     1C2 : 26 E0               		mvi 	e,224 											; then we do it again 224 times to put the write position on the bottom line
     224/     1C4 : 46 E9 01            		call 	_BICORepaintAll 								; we can only position the cursor by repainting the whole screen.
     225/     1C7 :                     
     226/     1C7 :                     _BICOExit:
     227/     1C7 : 36 00               		mvi 	l,BICO_SaveALH & 255 							; point HL to save area
     228/     1C9 : 2E 03               		mvi 	h,BICO_SaveALH / 256 
     229/     1CB :                     _BICORestore:
     230/     1CB : C7                  		mov 	a,m 											; restore AHL back.
     231/     1CC : 30                  		inr 	l
     232/     1CD : E7                  		mov 	e,m
     233/     1CE : 30                  		inr 	l
     234/     1CF : EF                  		mov 	h,m
     235/     1D0 : F4                  		mov 	l,e
     236/     1D1 : 07                  		ret 													; and exit.
     237/     1D2 :                     ;
     238/     1D2 :                     ;		Backspace
 AS V1.42 Beta [Bld 102] - source file test.asm - page 5 - 10/31/2015 3:25:57


     239/     1D2 :                     ;
     240/     1D2 :                     _BICOBackspace:
     241/     1D2 : C7                  		mov 	a,m 											; read cursor position
     242/     1D3 : B0                  		ora 	a 												; is zero, e.g. top of screen ?
     243/     1D4 : 68 C7 01            		jz 		_BICOExit 										; if so, we cannot backspace.
     244/     1D7 : E0                  		mov 	e,a 											; put the old cursor position in E and D
     245/     1D8 : DC                  		mov 	d,e
     246/     1D9 : 19                  		dcr 	d 												; D is now the new cursor position
     247/     1DA : F3                  		mov 	l,d 											; Make HL point to the previous character
     248/     1DB : 2E 02               		mvi 	h,BICO_Mirror/256 								
     249/     1DD : 3E A0               		mvi 	m,' '!080h 										; write a space there to erase it.
     250/     1DF : 46 E9 01            		call 	_BICORepaintAll 								; repaint everything including the current cursor position, erases.
     251/     1E2 : E3                  		mov 	e,d 											; then do it again with one fewer, putting cursor in correct position.
     252/     1E3 : 46 E9 01            		call 	_BICORepaintAll
     253/     1E6 : 44 C7 01            		jmp 	_BICOExit 										; and exit.
     254/     1E9 :                     
     255/     1E9 :                     ;
     256/     1E9 :                     ;		Repaint E characters on the screen (note E=0 = all characters) and set cursor position to E.
     257/     1E9 :                     ;
     258/     1E9 :                     _BICORepaintAll:
     259/     1E9 : 36 03               		mvi 	l,BICO_Cursor & 255 							; point HL to the cursor
     260/     1EB : 2E 03               		mvi 	h,BICO_Cursor / 256 							
     261/     1ED : FC                  		mov 	m,e 											; update cursor position.
     262/     1EE : 06 FF               		mvi 	a,0FFh 											; send the home cursor 
     263/     1F0 : 5D                  		out 	TVPort
     264/     1F1 : A8                  		xra 	a
     265/     1F2 : 5D                  		out 	TVPort
     266/     1F3 : F0                  		mov 	l,a 											; point HL to the mirror
     267/     1F4 : 2E 02               		mvi 	h,BICO_Mirror/256
     268/     1F6 :                     _BICORepaintLoop:
     269/     1F6 : C7                  		mov 	a,m 											; read character and print it
     270/     1F7 : 5D                  		out 	TVPort
     271/     1F8 : A8                  		xra 	a
     272/     1F9 : 5D                  		out 	TVPort 
     273/     1FA : 30                  		inr 	l 												; advance pointer
     274/     1FB : 21                  		dcr 	e 												; do this E times.
     275/     1FC : 48 F6 01            		jnz 	_BICORepaintLoop
     276/     1FF : 07                  		ret
     277/     200 :                     
     278/     200 :                     ;
     279/     200 :                     ;		Data Segment
     280/     200 :                     ;
     281/     200 :                     		align 	256 											; screen mirror, has to be on 1/4k boundary. required for scrolling/backspace.
     282/     200 :                     BICO_Mirror:
     283/     200 :                     		ds 		256
     284/     300 :                     
     285/     300 :                     BICO_SaveALH:
     286/     300 : 00 00 00            		db 		0,0,0 											; save position for AHL
     287/     303 :                     BICO_Cursor:
     288/     303 : 00                  		db 		0 												; current cursor position.
     289/     304 :                     
 AS V1.42 Beta [Bld 102] - source file test.asm - page 6 - 10/31/2015 3:25:57


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - |  BICO_CURSOR :                  303 C |
 BICO_MIRROR :                  200 C |  BICO_SAVEALH :                 300 C |
*BIGENDIAN :                      0 - |  BIOSCHARACTEROUT :             15D C |
 BIOSPRINTSTRING :              14F C |  BIOSREADSTRING :               100 C |
*BRANCHEXT :                      0 - |  BUFFER :                        1F C |
*CASESENSITIVE :                  0 - | *CASSETTEINPUTPORT :              1 - |
*CASSETTEOUTPUTPORT :             8 - | *CONSTPI :        3.141592653589793 - |
*DATE :                  10/31/2015 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 KEYBOARDPORT :                   0 - | *LISTON :                         1 - |
*MACEXP :                         1 - |  MESSAGE :                        F C |
*MOMCPU :                     8008E - | *MOMCPUNAME :               8008NEW - |
*NESTMAX :                      100 - | *PACKING :                        0 - |
*PADDING :                        1 - | *RELAXED :                        0 - |
*TIME :                     3:25:57 - | *TRUE :                           1 - |
 TVPORT :                         E - | *VERSION :                     142F - |
 _BICOBACKSPACE :               1D2 C |  _BICOCOPY :                    1AE C |
 _BICOEXIT :                    1C7 C |  _BICOLOOP :                    187 C |
 _BICONOTCLEAR :                1BA C |  _BICONOTCLEARSCREEN :          17E C |
 _BICOREPAINTALL :              1E9 C |  _BICOREPAINTLOOP :             1F6 C |
*_BICORESTORE :                 1CB C |  _BIRSBACKSPACE :               13A C |
 _BIRSEXIT :                    147 C |  _BIRSPRINTANDLOOP :            134 C |
 _BIRSWAITKEY :                 105 C |  _BIRSWAITRELEASE :             10D C |

     54 symbols
     31 unused symbols

 AS V1.42 Beta [Bld 102] - source file test.asm - page 7 - 10/31/2015 3:25:57


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    289 lines source file
      2 passes
      0 errors
      0 warnings
