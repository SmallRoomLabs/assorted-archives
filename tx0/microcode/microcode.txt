#
#		Microcode definition, TX-0. Bits, pattern, cycle, code.
#

2		1	0.8 AC &= 0000777 												# CLL Clear left 9 bits
3 		1	0.8 AC &= 0777000 												# CLR Clear right 9 bits

4,5		10 	0.8 															# IOS does IOS (stop for input)
4,5 	11 	1.8 HALT = 1 													# HLT stop computer, permanently.

6,7,8 	111	0.8	PUNCHTAPE(BITS2()|0100)										# P7H punch bits 2,5..17 with 7th hole (1-6)
6,7,8 	110 0.8 PUNCHTAPE(BITS2())											# P6H punch bits 2,5..17 without 7th hole (1-6)
6,7,8  	100 0.8 PRINTFLEXO(BITS2())											# PNT print on flexowriter.
6,7,8 	001 0.8 READBITS() 													# R1C read character into 0,3,6,9,12,15 (1-6)
6,7,8 	011 0.8 READBITS();CYCLERIGHT();READBITS();CYCLERIGHT();READBITS()	# R3C 3 times CYR / Read int 0.3 .... 15 (1-6)

6,7,8 	010 0.8 DISPLAYSCOPE(AC >> 9,AC & 0777)								# DIS Display on scope

9,10 	10 	1.4 AC = (AC >> 1) | (AC & 0400000)								# SHR Shift right preserving sign.
9,10 	11 	1.4 CYCLERIGHT() 												# CYR Cycle right
9,10 	01 	1.3 LR = _MBRSTART 												# MLR Copy MBR at START to Live Register

11,15	10 	1.1	AC = LIGHTPEN() 											# PEN read light pen flip flops into AC
11,15 	01 	1.1 AC = AC | TOGGLESWITCHACC() 								# TAC or TAC into AC

12 		1 	1.2 AC = AC ^ 0777777 											# COM 1's complement AC
13		1 	1.4 AC = AC ^ MBR 												# PAD Partial Add MBR to AC
14 		1 	1.7 AC = AC ^ MBR;AC = ADD18(AC,MBR) 							# CRY Partial Add Carry

16,17 	01	1.2 MBR = AC 													# AMB Copy AC to MBR
16,17 	11	1.2	MBR = TOGGLESWITCHBUFFER() 									# TBR Copy Toggle Switch Buffer to MBR
16,17 	10 	1.3 MBR = _LRSTART 												# LMB Copy Live register at START to MBR

#
#	Support Macros.
#
																			# Build 6 bit value from 2,5,8,11,14,17
:#define BITS2() 	(BITX(2,040)|BITX(5,020)|BITX(8,010)|BITX(11,004)|BITX(14,002)|BITX(17,001))

:#define BITX(m,v) 	((AC & (0400000 >> (v))) ? (m) : 0)						# Extract a bit with a new value.

																			# Read bits into 0,3,6,9,12,15
:#define READBITS() { AC &= 0333333; BITL(0,040);BITL(3,020);BITL(6,010);BITL(9,004);BITL(12,002);BITL(15,001); }

:#define BITL(b,m)	if ((INPUT & (b)) != 0) AC |= (0400000 >> (b)) 			# Put bit into accumulator.

:#define CYCLERIGHT() AC = ((AC >> 1) | (AC << 17)) & 0777777 				# Cycle AC right.

