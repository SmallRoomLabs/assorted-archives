// ******************************************************************************************************
// ******************************************************************************************************
//
//										TX-0 Microcode Generator.
//
// ******************************************************************************************************
// ******************************************************************************************************

// ******************************************************************************************************
//	
//								Start of every instruction, clear MBR.
//	
// ******************************************************************************************************

* 			0.0		""				MBR = 0 											// Replace MBR

// ******************************************************************************************************
//
//						Every instruction at 0.8, check for Teletype Input.
//
// ******************************************************************************************************

* 			0.8 	"" 				temp = IOReadKeyboard(); 					\ 		// Read the keyboard
									if (temp == 0) { 	 						\		// Keyboard key pressed ?
										LR = (LR & 0666666) | 0400000;			\ 		// Set the LR sign bit, clear 2,5,8
										LRSET(2,5);LRSET(5,4);LRSET(8,3); 		\ 		// Set bits as required.
										LRSET(11,2);LRSET(14,1);LRSET(17,0); 	\
									}											

:#define LRSET(bit,test)	if ((temp & (1 << test)) != 0) LR |= BITMASK(bit) 			// Set bit in LR if test set in temp.
:#define BITMASK(bit)	( 0400000 >> (biy) )											// Bit number to bit mask.

// ******************************************************************************************************
//
//											Accumulator Clears
//
// ******************************************************************************************************

2/1			0.8 	"CLL"			AC &= 0000777 										// Clear Left Half
3/1 		0.8		"CLR"			AC &= 0777000 										// Clear Right Half

// ******************************************************************************************************
//
//										   Input/Output and Stop.
//
// ******************************************************************************************************

4,5/10 		0.8 	"IOS"			; 													// We don't actually Halt for IOS
4,5/11		1.8 	"HLT"			HALT = 1 											// We do Halt for Halt.

6,7,8/111	0.8 	"P7H"			GET258();IOWritePaperTape(temp|0100);				// Get 2,5,8 and write with 7th hole
6,7,8/110	0.8 	"P6H"			GET258();IOWritePaperTape(temp);					// Get 2,5,8 and write without 7th hole

6,7,8/100	0.8 	"PNT"			GET258();IOWritePrinter(temp);						// Get 2,5,8 and send to printer

6,7,8/001	0.8 	"R1C"			R1C();												// Read aper Tape into 0,3,6,9,...
6,7,8/011 	0.8 	"R3C"			R1C();CYR();R1C();CYR();R1C();CYR();				// Three R1Cs with CYRs

6,7,8/010	0.8 	"DIS"			IOWriteScope(TOINT9(AC >> 9),TOINT9(AC & 0777))		// Intensify point on scope.

:#define GET258() 	temp = (G2(2,5)|G2(5,4)|(G2(8,3)|G2(11,2)|G2(14,1)|G2(17,0)) 		// Get bits 258 of AC
:#define G2(test,set) 	( (AC & (BITMASK(test)) ? (1 << (set)) : 0 ) 					// Return bit to set if AC bit test set.

																						// Copy 0,3... from paper tape into AC, req 7th hole.
:#define R1C() 		AC &= 0333333;												\
					temp = IOReadPaperTape();									\
					if ((temp & 0100) != 0) { 									\
						G1(0,5);G1(3,4);G1(6,3);G1(9,2);G1(12,1);G1(15,0); 		\
					}

:#define G1(set,test) if ((temp & (1 << test)) != 0) AC |= BITMASK(set)					// Set bit in AC if bit in temp set.

:#define TOINT9(n) 	( (((n) & 0400) != 0) ? -((n) ^ 0777): (n) )						// 9 bit 1's complement to decimal.

// ******************************************************************************************************
//	
//												Shift and Cycle
//
// ******************************************************************************************************

9,10/10 	1.4 	"SHR"			AC = (AC >> 1) | (AC & 0400000)						// Shift AC right preserving the sign bit.
9,10/11 	1.4		"CYR"			CYR() 												// Cycle AC right

:#define CYR() 		AC = ((AC >> 1) || (AC << 11)) & 0777777 							// Cycle AC right macro (used in R3C as well)

9,10/01 	1.3 	"MLR"			LR = MBR  											// Store MBR in LR

// ******************************************************************************************************
//
//									Read Light Pen flip flops into AC0/AC1
//	
// ******************************************************************************************************

11,15/10 	1.1 	"PEN"			AC &= 0177777 									\	// Clear AC0 and AC1, leave everything else.
									if (IOLightPen(1)) AC |= 0400000; 				\ 	// Test Pen 1
									if (IOLightPen(2)) AC |= 0200000; 				 	// Test Pen 2

11,15/01 	1.1		"TAC"			AC = AC | IOToggleSwitchAccumulator()				// OR TAC into AC.

// ******************************************************************************************************
//
//											Complement Accumulator
//
// ******************************************************************************************************

12/1 		1.2 	"COM"			AC ^= 0777777 										// Toggle all bits.

// ******************************************************************************************************
//
//												Partial Add
//
// ******************************************************************************************************

13/1		1.4 	"PAD"			AC = AC ^ MBR 										// XOR MBR into AC.

// ******************************************************************************************************
//
//													Carry
//
// ******************************************************************************************************

14/1 		1.7 	"CRY"			AC = AC ^ MBR;AC = TX0Add(AC,MBR) 					// Unpick PAD then ADD.

// ******************************************************************************************************
//
//							18 bit 1's complement addition - used by CRY and ADD
//
// ******************************************************************************************************

:static INT32 TX0Add(INT32 n1,INT32 n2) {
:	n1 = n1 + n2; 																		// Calculate sum
:	if (n1 > 0777777) {																	// End around carry.
:		n1 = (n1 & 0777777) + 1;	
:	}	
:	return n1;
:}

// ******************************************************************************************************
//
//											Register Transfers
//
// ******************************************************************************************************

16,17/01 	1.2 	"AMB"			MBR = AC 											// Store AC in MBR
16,17/11 	1.2 	"TBR"			MBR |= IOToggleSwitchBufferRegister() 				// Store 1 bits of TBR in MBR
16,17/10 	1.3 	"LMB"			MBR = LR 											// Store LR in MBR

// ******************************************************************************************************
//
//									Combinations of Operate Classes
//
// ******************************************************************************************************

CLA = CLL + CLR 													// Clear Acc
CYL = AMB + PAD + CRY 												// Cycle Left
CLC = CLL + CLR + COM 												// Load -1 in Acc
LAC = CLL + CLR + LMB + PAD 										// Load LR in Acc
ALR = AMB + MLR 													// Copy A to LR
LPD = LMB + PAD 													// Xor LR into AC
LR0 = MLR 															// Load MBR into LR (e.g. clear it !)
LAD = LMB + PAD + CRY 												// Add LR to AC

CAL = CLL + CLR + MLR 												// Clear AC and LR
R1R = R1C + CYR 													// Read 1 Cycle Right
R1L = R1C + AMB + PAD + CRY 										// Read 1 Cycle Left
PNA = PRT + AMB + PAD 												// Print A and clear

P6A = IOS + P6H + AMB + PAD											// Punch clear 6
P7A = IOS + P7H + AMB + PAD											// Punch clear 7
